package main.java.model.user;

import main.java.text.CommonText;
import main.java.utility.StrIdGenerator;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * User entity.
 */
public abstract class User implements Serializable {

    private final static StrIdGenerator uIdGenerator = new StrIdGenerator();

    private final String uid;

    private final String username;

    private final String password;

    private final List<Date> loginHistory;

    /**
     * Constructs a new user object with username and password, assign it with a string uid, and an empty list of
     * login history.
     *  @param username the username for the new user
     *  @param password the password for the new user
     */
    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.uid = assignUid();
        this.loginHistory = new ArrayList<>();
    }

    /**
     * Constructs a new user object with username, password and a list of login history, assign it with a string uid.
     * @param username the username for the new user
     * @param password the password for the new user
     * @param loginHistory the loginHistory for the new user
     */
    public User(String username, String password, List<Date> loginHistory) {
        this(username, password);
        for (Date dateTime: loginHistory) {
            this.recordLoginTime(dateTime);
        }
    }

    /**
     * Indicates whether both users have the same userid.
     * @param obj another object
     * @return true if both users have the same userid
     */
    @Override
    public boolean equals(Object obj) {
        return obj instanceof User && this.uid.equals(((User) obj).getUid());
    }

    /**
     * Gets the userid of the user.
     * @return the userid of the user
     */
    public String getUid() {
        return this.uid;
    }

    /**
     * Sets the userid as an integer generated by uIDGenerator.
     * @return the signed userid
     */
    private static String assignUid() {
        return uIdGenerator.generate();
    }

    /**
     * Gets the username of this user.
     * @return the username
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Gets the password of this user.
     * @return the password of this user
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Gets LoginHistory of this user.
     * @return the login history of this user
     */
    public List<Date> getLoginHistory() {
        return this.loginHistory;
    }

    /**
     * Adds the current login time to the login history of this user.
     * @param dateTime a LoginTime
     */
    public void recordLoginTime(Date dateTime) {
        this.loginHistory.add(dateTime);
        Collections.sort(this.loginHistory);
        Collections.reverse(this.loginHistory);
    }

    /**
     * Gets the latest login time of this user.
     * @return the latest login time of this user
     */
    public String getLastLoginStr() {
        if (!this.loginHistory.isEmpty()) {
            return new SimpleDateFormat("EEE MMM yyyy HH:mm:ss.SSS Z", Locale.ENGLISH)
                    .format(this.loginHistory.get(0));
        }
        return new CommonText().getNone();
    }
}
